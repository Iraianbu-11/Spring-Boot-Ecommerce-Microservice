services:
  react-app:
    container_name: zcommerce
    build: ./frontend
    ports:
      - "3000:3000"
    networks:
      - microservices-net
  
  postgresql:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: iraianbu
      POSTGRES_PASSWORD: password
      POSTGRES_DB: product
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - microservices-net
    restart: unless-stopped
  
  pgadmin:
    container_name: ms_pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - microservices-net
    restart: unless-stopped

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices-net
  redis:
    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    networks:
      - microservices-net
    restart: unless-stopped
  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - 27017:27017
    volumes:
      - mongo:/data
    environment:
      - MONGO_INITDB_ROOT_USERNAME=iraianbu
      - MONGO_INITDB_ROOT_PASSWORD=password
    networks:
      - microservices-net

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    restart: unless-stopped
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=iraianbu
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    networks:
      - microservices-net

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - microservices-net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      #PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    networks:
      - microservices-net

  mail-dev:
    container_name: mail-dev
    image: maildev/maildev
    ports:
      - 1080:1080
      - 1025:1025
    networks:
      - microservices-net
  discovery-service:
    container_name: discovery-service
    build: ./backend/discovery-service
    networks:
      - microservices-net
    environment:
      - DISCOVERY_NAME=discovery-service
    ports:
      - "8761:8761"

  api-gateway:
    container_name: api-gateway
    build: ./backend/api-gateway
    networks:
      - microservices-net
    depends_on:
      - discovery-service
    environment:
      - DISCOVERY_NAME=discovery-service
      - HOST_NAME=localhost
    ports:
      - "8222:8222"
    restart: unless-stopped

  customer-service:
    container_name: customer-service
    build: ./backend/customer-service
    networks:
      - microservices-net
    depends_on:
      - discovery-service
      - mongodb
      - redis
    environment:
      - HOST_NAME=localhost
      - DISCOVERY_NAME=discovery-service
      - MONGO_HOST=mongodb
      - REDIS_HOST=redis
    ports:
      - "8090:8090"
    restart: unless-stopped

  product-service:
    container_name: product-service
    build: ./backend/product-service
    networks:
      - microservices-net
    depends_on:
      - discovery-service
      - postgresql
      - redis
    environment:
      - HOST_NAME=localhost
      - POSTGRES_HOST=postgres
      - DISCOVERY_NAME=discovery-service
      - REDIS_HOST=redis
    ports:
      - "8050:8050"
    restart: unless-stopped

  payment-service:
    container_name: payment-service
    build: ./backend/payment-service
    networks:
      - microservices-net
    depends_on:
      - discovery-service
      - postgresql
      - kafka
    environment:
      - HOST_NAME=localhost
      - POSTGRES_HOST=postgres
      - DISCOVERY_NAME=discovery-service
      - KAFKA=kafka
    ports:
      - "8060:8060"
    restart: unless-stopped

  notification-service:
    container_name: notification-service
    build: ./backend/notification-service
    networks:
      - microservices-net
    depends_on:
      - discovery-service
      - mongodb
      - kafka
      - mail-dev
    environment:
      - MONGO_HOST=mongodb
      - KAFKA=kafka
      - MAIL_HOST=mail-dev
      - DISCOVERY_NAME=discovery-service
      - HOST_NAME=localhost
    ports:
      - "8040:8040"
    restart: unless-stopped

  order-service:
    container_name: order-service
    build: ./backend/order-service
    networks:
      - microservices-net
    environment:
      - KAFKA= kafka
      - API-GATEWAY=api-gateway
      - HOST_NAME=localhost
      - POSTGRES_HOST=postgres
      - DISCOVERY_NAME=discovery-service
      - REDIS_HOST=redis
    depends_on:
      - discovery-service
      - postgresql
      - kafka
      - redis
    ports:
      - "8070:8070"
    restart: unless-stopped


networks:
  microservices-net:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  mongo:
